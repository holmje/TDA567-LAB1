Given the method:

    public boolean addWorkingPeriod(String employee, int starttime, int endtime);

With the specification:

    requires:
      employee is a non-null string
    ensures:
      if starttime < 0 or endtime >= size or starttime > endtime then
        returns false and the schedule is unchanged
      otherwise
        if for any hour in the interval starttime to endtime the length of workingEmployees is equal to requiredNumber then
          returns false and the schedule is unchanged
        otherwise
          if for any hour in the interval starttime to endtime there is a string in workingEmployees which equal employee then
            returns false and the schedule is unchanged
          otherwise
            returns true,
            for i between starttime and endtime, workingEmployees contain a string equal to employee and
            the rest of the schedule is unchanged


    Input Space: employee != null

    Partition #1: No setReqiuiredNumber
        addWorkerWhenNoneIsNeeded_addWorkingPeriod_part1:
            input: "jesper[0], 3, 6", expected: DoNotAddWorker
                                      expected: ReturnFalse

    Partition #2: starttime < endtime and setRequiredNumber(1, 3, 6)
        addWorkerOnePerson_addWorkingPeriod_part2:
            input: "jesper[0], 2, 5", expected: addWorker
                                      expected: returnTrue

    Partition #3: starttime < 0 and setRequiredNumber(1, 3, 6)
        startTimeLessThanZero_addWorkingPeriod_part3:
            input: "jesper[0], -1, 3", expected DoNotAddWorker
                                       expected returnFalse

    Partition #4: endTime >= size and setRequiredNumber(1, 3, 6)
        endTimeIsGreaterOrEqualToSize_addWorkingPeriod_part4:
            input: "jesper[0], 6, 24", expected DoNotAddWorker
                                       expected returnFalse

    Partition #5: starttime > endtime and setRequiredNumber(1, 3, 6)
        starttimeIsGreaterThanEndTime_addWorkingPeriod_part5:
            input: "jesper[0], 6, 3", expected: DoNotAddWorker
                                      expected: returnFalse

    partition #6: setRequiredNumber(1, 3, 6)
        addMoreWorkersThanNeeded_addWorkingPeriod_part6:
            input: "jesper[0], 3, 6"
                   "johan[0], 3, 6"
            expected: DoNotAddSecondWorker
            expected: returnFalse

    partition #7: setRequiredNumber(3, 3, 6)
        addLessWorkersThanNeeded_addWorkingPeriod_part7:
            input: "jesper[0], 3, 6"
                   "johan[0], 3, 6"
            expected: AddWorkers
            expected: returnTrue

    partition #8: setRequiredNumber(1, 3, 6)
        addWorkerToLargerPeriodThanNeeded_addWorkingPeriod_part8:
            input: "jesper[0], 1, 6", expected: DoNotAddWorker
                                      expected: returnFalse

    partition #9: starttime = endtime and setRequiredNumber(1, 3, 3)
        startTimeEqualToEndTime_addWorkingPeriod_part9:
            input: "jesper[0], 3, 3", expected addWorker
                                      expected returnTrue

    partition #10: setRequiredNumber(1, 3, 6)
        addSameWorkerMultipleTimes_addWorkingPeriod_part10:
            input: "jesper[0], 3, 6"
                   "jesper[0], 3, 6"
            expected: DoNotAddWorkerSecondTime
            expected: returnFalse

    Border Cases:

    Found bugs: partition #5 returns true when it should return false.


Given the method:

    public String[] workingEmployees(int starttime, int endtime);

With the specification:

    requires:
      starttime >= 0 and endtime < size
    ensures:
      if starttime <= endtime then
        returns an array with distinct strings -- a string appears in the return array if and only if
        it appears in the workingEmployees of at least one hour in the interval starttime to endtime
      otherwise
        returns an empty array
      and in either case the schedule is unchanged

    Input space: starttime >= 0 and endtime < size

    partition #1: starttime < endtime and setRequiredNumber(1, 0, 23)
        startTimeLessThanEndTime_workingEmployees_part1:
            input: "'Jesper', 0, 23", expected: distinct_array = {"Jesper"}

    partition #2: starttime = endtime and setRequiredNumber(1, 6, 6)
        starttimeEqualsEndtime_workingEmployees_part2:
            input: "'Jesper', 6, 6", expected: distinct_array = {"Jesper"}

    partition #3: starttime > endtime and setRequiredNumber(1, 0, 23)
        starttimeGreaterThanEndtime_workingEmployees_part3:
            input: "'Jesper', 7, 2", expected: emptyArray

    partition #4: setrequiredNumber(4, 0, 23)
        allWorkersAtDifferentTimes_workingEmployees_part4:
            input: "'Jesper',2,4"
                   "'Johan',6,8"
                   "'Kasper',10,12"
                   "'Dan',14,18"
            expected: Distinct_array = {"Jesper","Johan","Kasper","Dan"}

    partition #5: setrequiredNumber(4, 0, 23)
        allWorkersAtSameTimes_workingEmployees_part5:
            input: "'Jesper',6,14"
                   "'Johan',6,14"
                   "'Kasper',6,14"
                   "'Dan',6,14"
            expected: Distinct_array = {"Jesper","Johan","Kasper","Dan"}

    Border Cases:

    Found bugs: partition #4 and #5 have a bug where they don't accept multiple workers on times other
    ranges than 0 to 23.
